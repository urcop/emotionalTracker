// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/user/": {
            "get": {
                "description": "Retrieve a list of all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "responses": {
                    "200": {
                        "description": "Returns a list of users",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "description": "User update request",
                        "name": "update_user.Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_user.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns success status",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User request",
                        "name": "create_user.Request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/create_user.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the ID of the created user",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/telegram/": {
            "get": {
                "description": "Retrieve a single user by its Telegram ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by Telegram ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Telegram ID",
                        "name": "telegram_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the requested user",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}/": {
            "get": {
                "description": "Retrieve a single user by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the requested user",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns success status",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{id}/birthday/": {
            "put": {
                "description": "Update the birthdate for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user's birthdate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Birthdate information",
                        "name": "birthdate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/update_user_birthday.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns success status",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{telegram_id}/horoscope": {
            "get": {
                "description": "Get translated daily horoscope for a user based on their birthdate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zodiac"
                ],
                "summary": "Get daily horoscope for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID or Telegram ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns translated horoscope information",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/user/{telegram_id}/zodiac": {
            "get": {
                "description": "Get zodiac sign information for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zodiac"
                ],
                "summary": "Get user's zodiac sign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns zodiac sign information",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/zodiac/": {
            "get": {
                "description": "Get zodiac sign information by birthdate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zodiac"
                ],
                "summary": "Get zodiac sign by birthdate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Birthdate in format DD.MM.YYYY or YYYY-MM-DD",
                        "name": "birthdate",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns zodiac sign information",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/zodiac/horoscope": {
            "get": {
                "description": "Get translated daily horoscope for a zodiac sign or by birthdate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "zodiac"
                ],
                "summary": "Get daily horoscope for a zodiac sign or by birthdate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Zodiac sign name (e.g., Aries, Taurus, etc.)",
                        "name": "sign",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Birthdate in format DD.MM.YYYY or YYYY-MM-DD",
                        "name": "birthdate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns translated horoscope information",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.RawResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "create_user.Request": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "birthsday": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "second_name": {
                    "type": "string"
                },
                "telegram_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "update_user.Request": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/models.User"
                }
            }
        },
        "update_user_birthday.Request": {
            "type": "object",
            "properties": {
                "birthdate": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "v1.RawResponse": {
            "type": "object"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
